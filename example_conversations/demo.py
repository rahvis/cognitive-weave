# cognitive_weave_poc/main.py

from cognitive_weave.semantic_oracle import SemanticOracleInterface
from cognitive_weave.data_structures import InsightParticle, InsightAggregateAttributes
from cognitive_weave.utils import log_info, log_error

def demonstrate_ip_enrichment(soi: SemanticOracleInterface):
    """
    Demonstrates the IP enrichment process.
    """
    log_info("\n--- Starting IP Enrichment Demonstration ---")
    
    raw_text_input = """
Meeting Minutes: Project Atlas - Phase 2 Kick-off - June 02, 2025

Attendees: Dr. Aris Thorne (Project Lead), Lena Hanson (Engineering), Kenji Tanaka (Research)

Key Discussion Points:
1. Phase 1 review: Successfully mapped 75% of the target genome sequence. Budget overrun by 10% due to extended computational time.
2. Phase 2 goals: Complete genome sequencing, identify key protein markers, and develop preliminary diagnostic algorithm. Timeline set for 6 months.
3. Resource allocation: Engineering team requires two additional HPC nodes. Research team needs access to the new 'BioSynth' dataset.
4. Risk assessment: Potential delays if 'BioSynth' dataset access is not granted by Q3. Mitigation plan: Explore alternative public datasets, though less comprehensive.
5. Collaboration with Institute X: Confirmed for data validation starting month 4 of Phase 2.

Action Items:
- Lena Hanson: Submit HPC node request by June 7th.
- Kenji Tanaka: Formalize 'BioSynth' dataset access request by June 7th.
- Dr. Aris Thorne: Draft Phase 2 detailed project plan by June 14th.
"""
    log_info(f"Raw text for IP enrichment:\n{raw_text_input[:300]}...") # Print a snippet

    ip_attributes = soi.enrich_text_to_ip_attributes(raw_text_input)

    if ip_attributes:
        # Create an InsightParticle object
        # For PoC, core_data is the raw_text itself. In a real system, it could be more structured.
        new_ip = InsightParticle(
            core_data=raw_text_input,
            resonance_keys=ip_attributes.get("resonance_keys", []),
            signifiers=ip_attributes.get("signifiers", []),
            situational_imprint=ip_attributes.get("situational_imprint"),
            extracted_entities=ip_attributes.get("extracted_entities", [])
        )
        
        log_info("\nSuccessfully enriched text and created Insight Particle:")
        print(f"  IP ID: {new_ip.particle_id}")
        print(f"  Situational Imprint: {new_ip.situational_imprint}")
        print(f"  Resonance Keys: {new_ip.resonance_keys}")
        print(f"  Signifiers: {new_ip.signifiers}")
        print(f"  Extracted Entities: {new_ip.extracted_entities}")
        print(f"  Creation Timestamp: {new_ip.creation_timestamp}")
        return new_ip # Return for potential use in IA synthesis demo
    else:
        log_error("IP enrichment failed.")
        return None

def demonstrate_ia_synthesis(soi: SemanticOracleInterface):
    """
    Demonstrates the IA synthesis process using a few example IP imprints.
    """
    log_info("\n--- Starting IA Synthesis Demonstration ---")

    # Example situational imprints from (hypothetical) related IPs
    # These would typically be generated by previous IP enrichment steps
    ip_imprints_for_synthesis = [
        "IP1 Imprint: Customer feedback survey (May 2025) for 'Nova CRM' highlights strong appreciation for its comprehensive feature set but expresses significant frustration with the steep learning curve and unintuitive user interface, particularly for new users.",
        "IP2 Imprint: Support ticket analysis for 'Nova CRM' in Q2 2025 reveals that 40% of all tickets are related to UI navigation issues and difficulties in finding specific features, with an average resolution time 25% higher for these tickets.",
        "IP3 Imprint: Usability testing report (May 2025) for 'Nova CRM' showed that 7 out of 10 new users failed to complete the onboarding task sequence within the allocated 30 minutes, citing confusing menu structures and unclear iconograph.",
        "IP4 Imprint: Competitor analysis (June 2025) indicates that while 'Nova CRM' leads in feature depth, newer competitors like 'StellarFlow CRM' are gaining market share rapidly due to their significantly simpler UI and faster onboarding processes."
    ]
    
    log_info("IP Imprints provided for IA synthesis:")
    for i, imprint in enumerate(ip_imprints_for_synthesis):
        print(f"  Imprint {i+1}: {imprint}")

    ia_attributes: Optional[InsightAggregateAttributes] = soi.synthesize_ia_from_imprints(ip_imprints_for_synthesis)

    if ia_attributes:
        log_info("\nSuccessfully synthesized Insight Aggregate attributes:")
        print(f"  IA Core Data: {ia_attributes.ia_core_data}")
        print(f"  IA Situational Imprint: {ia_attributes.ia_situational_imprint}")
        print(f"  IA Resonance Keys: {ia_attributes.ia_resonance_keys}")
        print(f"  IA Signifiers: {ia_attributes.ia_signifiers}")

        # To represent this as a full InsightParticle (which an IA is a special type of):
        synthesized_ia_particle = InsightParticle(
            core_data=ia_attributes.ia_core_data, # The synthesized knowledge is the core data
            resonance_keys=ia_attributes.ia_resonance_keys,
            signifiers=ia_attributes.ia_signifiers,
            situational_imprint=ia_attributes.ia_situational_imprint,
            is_aggregate=True,
            # derived_from_ids would be populated with actual IP IDs in a full system
            derived_from_ids=[f"hypothetical_IP_id_{i+1}" for i in range(len(ip_imprints_for_synthesis))] 
        )
        log_info(f"\nRepresented as an InsightParticle (IA):")
        print(f"  IA ID: {synthesized_ia_particle.particle_id}")
        print(f"  Is Aggregate: {synthesized_ia_particle.is_aggregate}")
        print(f"  Derived From IDs: {synthesized_ia_particle.derived_from_ids}")

    else:
        log_error("IA synthesis failed.")


if __name__ == "__main__":
    log_info("Initializing Cognitive Weave PoC...")
    
    # Check if Azure credentials are placeholders before proceeding
    from cognitive_weave.utils import AZURE_OAI_ENDPOINT, AZURE_OAI_KEY, AZURE_OAI_DEPLOYMENT_GPT4
    if AZURE_OAI_ENDPOINT == "YOUR_AZURE_OPENAI_ENDPOINT" or \
       AZURE_OAI_KEY == "YOUR_AZURE_OPENAI_KEY" or \
       AZURE_OAI_DEPLOYMENT_GPT4 == "YOUR_GPT4_DEPLOYMENT_NAME":
        log_error("Azure OpenAI credentials are not configured in cognitive_weave/utils.py.")
        log_error("Please update the placeholder values before running the PoC.")
        exit(1)
        
    try:
        semantic_oracle = SemanticOracleInterface()
        log_info("Semantic Oracle Interface initialized.")

        # Demonstrate IP Enrichment
        demonstrate_ip_enrichment(semantic_oracle)

        # Demonstrate IA Synthesis
        demonstrate_ia_synthesis(semantic_oracle)

    except Exception as e:
        log_error(f"An unexpected error occurred in the main execution: {e}")

    log_info("\nCognitive Weave PoC demonstration finished.")
